datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(cuid())
  username       String         @unique @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  notifications  Notification[]
  subscriptions  Subscription[]
  createdAt      DateTime       @default(now())
  usageUpdatedAt DateTime       @default(now())

  @@map(name: "users")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  refresh_token_expires_in Int?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Subscription {
  id             String @id @default(cuid())
  endpoint       String
  p256dh         String
  auth           String
  expirationTime Int?
  userId         String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("subscriptions")
}

model Notification {
  id                 String   @id @default(cuid())
  title              String?
  actions            Action[]
  badge              String?
  body               String?
  data               String?
  dir                String?
  icon               String?
  image              String?
  lang               String?
  renotify           Boolean?
  requireInteraction Boolean?
  silent             Boolean?
  tag                String?
  timestamp          Int?
  vibrate            String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("notifications")
}

model Action {
  id             String  @id @default(cuid())
  action         String?
  icon           String?
  title          String?
  notificationId String?

  notification Notification? @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@unique([notificationId])
  @@map("actions")
}
